/*
    Let's start by clearing out some of the default styles and changing our box-sizing to a more accurate method.
    
    The asterisk (*) selector is the universal selector meaning it can be used to select any and all types of elements in the html.
*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/*
    Since we'll be putting most of our images in divs and we don't want them to be super large, let's reset all img's inside of divs to be 100% of their container. Remember, their container's need to have a width on them as well for this to work the way we intend it it.

    This isn't 100% necessary and can be temporary as you'll most likely change the images size based on the area it's in. However, this will keep the image from being too large and making it difficult to see changes you make before you change it's size.
*/
div img { 
    width: 100%;
}

/*
    Now let's give our basic-example div a width of 50% to make it smaller and a margin: 0 auto; to center the div itself on the page.

    Then, let's apply a display of flex to it to turn our basic-example into a flex parent and it's children into flex children.

    Now our image and p element should be side by side without much  additonal styling. This is because by default, our flex container's direction is set to row.
*/
#basic-example {
    width: 50%;
    margin: 0 auto;
    display: flex;
}
